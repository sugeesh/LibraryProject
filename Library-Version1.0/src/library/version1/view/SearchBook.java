/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package library.version1.view;

import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import library.version1.controller.BookAuthorDetailController;

import library.version1.controller.BookController;
import static library.version1.controller.BookController.getBookDetails;
import library.version1.controller.BookPositionController;
import library.version1.controller.BookTitleController;
import library.version1.extra.Validate;
import library.version1.model.BookSearch;

/**
 *
 * @author Neo_
 */
public class SearchBook extends javax.swing.JDialog {
    String searchBy;
    DefaultTableModel tableModel ;
    /**
     * Creates new form SearchBook
     */
    public SearchBook(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        setLocationRelativeTo(null);
        searchByButtonGroup.add(titleRadio);
        searchByButtonGroup.add(authorRadio);
        searchByButtonGroup.add(categoryRadio);
        searchByButtonGroup.add(accessionNumberRadio);
        
        
        tableModel =(DefaultTableModel)resultTable.getModel();
        titleRadio.setSelected(true);
        searchBy="Title";  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchByButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        searchByPanel = new javax.swing.JPanel();
        titleRadio = new javax.swing.JRadioButton();
        authorRadio = new javax.swing.JRadioButton();
        categoryRadio = new javax.swing.JRadioButton();
        accessionNumberRadio = new javax.swing.JRadioButton();
        cancelButton = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        orderBookButton = new javax.swing.JButton();
        bookHistoryButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bookDetailButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Book");

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/folder-search-icon.png"))); // NOI18N
        titleLabel.setText("Search Book");

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));

        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        searchByPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));

        titleRadio.setText("Title");
        titleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleRadioActionPerformed(evt);
            }
        });

        authorRadio.setText("Author");
        authorRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorRadioActionPerformed(evt);
            }
        });

        categoryRadio.setText("Category");
        categoryRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryRadioActionPerformed(evt);
            }
        });

        accessionNumberRadio.setText("Accession Number");
        accessionNumberRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessionNumberRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchByPanelLayout = new javax.swing.GroupLayout(searchByPanel);
        searchByPanel.setLayout(searchByPanelLayout);
        searchByPanelLayout.setHorizontalGroup(
            searchByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchByPanelLayout.createSequentialGroup()
                .addComponent(titleRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accessionNumberRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchByPanelLayout.setVerticalGroup(
            searchByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchByPanelLayout.createSequentialGroup()
                .addGroup(searchByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accessionNumberRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 420, Short.MAX_VALUE)
                .addComponent(searchByPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchByPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Accession Number", "Author", "Section", "Category", "Availability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTable.getTableHeader().setReorderingAllowed(false);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        orderBookButton.setText("Order Book");
        orderBookButton.setEnabled(false);
        orderBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBookButtonActionPerformed(evt);
            }
        });

        bookHistoryButton.setText("Book History");
        bookHistoryButton.setEnabled(false);
        bookHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookHistoryButtonActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        bookDetailButton.setText("Book Details");
        bookDetailButton.setEnabled(false);
        bookDetailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDetailButtonActionPerformed(evt);
            }
        });
        jPanel1.add(bookDetailButton);

        editButton.setText("Edit ");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jPanel1.add(editButton);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(orderBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(orderBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        searchButton.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextActionPerformed

    private void cleanTable(){
        int rowCount=tableModel.getRowCount();
        for(int i=0;i<rowCount;i++){
              tableModel.removeRow(0);
        }
     }
    
    
    
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            cleanTable();
            
            String search=searchText.getText();
            switch(searchBy){
                case "Title"        :  setSearchResults(searchByTitle(search));
                                       break;
                case "Author"       :  setSearchResults(searchByAuthor(search));
                                       break;
                case "Category"     :  setSearchResults(searchByCategory(search));
                                       break;
                case "AccessioNumber": setSearchResults(searchByAccessionNumber(search));
                                       break;
            }
            // TODO add your handling code here:
        } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
       
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void setSearchResults(ArrayList<BookSearch> bookSearch){
        for(BookSearch book : bookSearch){
            String title = book.getTitle();
            String accessionNumber = book.getAccessionNumber();
            String authorName  = book.getAuthorName();
            String sectionName  = book.getSectionName();
            String categoryName = book.getCategoryName();
            boolean availability=book.isAvailability();
            Object[] row ={title,accessionNumber,authorName,sectionName,categoryName,availability};
            tableModel.addRow(row);
        }
    }
        
    
    private void titleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleRadioActionPerformed
        searchBy="Title";        // TODO add your handling code here:
        searchText.setText(null);
        cleanTable();
    }//GEN-LAST:event_titleRadioActionPerformed

    private void authorRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorRadioActionPerformed
        searchBy="Author";        // TODO add your handling code here:
        searchText.setText(null);
        cleanTable();
    }//GEN-LAST:event_authorRadioActionPerformed

    private void categoryRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryRadioActionPerformed
         searchBy="Category";        // TODO add your handling code here:
         searchText.setText(null);
         cleanTable();
    }//GEN-LAST:event_categoryRadioActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if(resultTable.getSelectedRow()!=-1){
            int selectedRow= resultTable.getSelectedRow();
            String accessionNumber=tableModel.getValueAt(selectedRow,1).toString();

            new EditBook(null, true,accessionNumber).setVisible(true);            // TODO add your handling code here:

            searchButton.doClick();
        }else{
            JOptionPane.showMessageDialog(this, "Select a Book First");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(resultTable.getSelectedRow()!=-1){
            int selectedRow= resultTable.getSelectedRow();
            String accessionNumber=tableModel.getValueAt(selectedRow,1).toString();

            int option =JOptionPane.showConfirmDialog(this, "Are you sure to Delete this Book ?", "Delete Book", JOptionPane.YES_NO_OPTION);        // TODO add your handling code here:
            if(option==JOptionPane.YES_OPTION){
                    try {
                        int result = BookController.deleteBook(accessionNumber);
                        if(result==1){
                            JOptionPane.showMessageDialog(this, "Book Deleted ");
                            searchButton.doClick();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    }
            }    
        }else{
            JOptionPane.showMessageDialog(this, "Select Book First");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void accessionNumberRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessionNumberRadioActionPerformed
        searchBy="AccessioNumber";        // TODO add your handling code here:
        searchText.setText(null);
        cleanTable();        // TODO add your handling code here:
    }//GEN-LAST:event_accessionNumberRadioActionPerformed

    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableMouseClicked
        int row = resultTable.getSelectedRow();
        if(row!=-1)   {                                                             // TODO add your handling code here:
            
            if((boolean)resultTable.getValueAt(row, 5)==false){
                orderBookButton.setEnabled(true);
            }else{
                orderBookButton.setEnabled(false);
            }
        }else{
            
            orderBookButton.setEnabled(false);
        }
        
        if(resultTable.getSelectedRow()!=-1){
            bookHistoryButton.setEnabled(true);
            bookDetailButton.setEnabled(true);
            if((boolean)resultTable.getValueAt(resultTable.getSelectedRow(), 5)==true){
                editButton.setEnabled(true);
                deleteButton.setEnabled(true);
            }else{
                editButton.setEnabled(true);
                deleteButton.setEnabled(false);
            }
        }else{
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            bookHistoryButton.setEnabled(false);
            bookDetailButton.setEnabled(false);
        }  
        
    }//GEN-LAST:event_resultTableMouseClicked

    private void orderBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBookButtonActionPerformed
        new AddOrder(null,true,resultTable.getValueAt(resultTable.getSelectedRow(),0).toString()).setVisible(true); // TODO add your handling code here:
    }//GEN-LAST:event_orderBookButtonActionPerformed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        if(!searchText.getText().isEmpty()){               // TODO add your handling code here:
            searchButton.setEnabled(true);
        }else{
            searchButton.setEnabled(false);
        }       
    }//GEN-LAST:event_searchTextKeyReleased

    private void searchTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyPressed
        if(accessionNumberRadio.isSelected()){
           if(!Validate.validateAccessionNumber(searchText.getText() + evt.getKeyChar()+"")){
               if(evt.getKeyCode()!=KeyEvent.VK_BACK_SPACE){
                    getToolkit().beep();
                    searchText.setEditable(false);
                }else{
                    searchText.setEditable(true);
                }
           }else{
              searchText.setEditable(true);
      } 
        
        }        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextKeyPressed

    private void bookHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookHistoryButtonActionPerformed
        if(resultTable.getSelectedRow()!=-1){
            String accessionNumber = resultTable.getValueAt(resultTable.getSelectedRow(), 1).toString();
            new BookHistory(null, true, accessionNumber).setVisible(true);        // TODO add your handling code here:
        }else{
            JOptionPane.showMessageDialog(this, "Select Book First");
        }
    }//GEN-LAST:event_bookHistoryButtonActionPerformed

    private void bookDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDetailButtonActionPerformed
        if(resultTable.getSelectedRow()!=-1){
            String accessionNumber = resultTable.getValueAt(resultTable.getSelectedRow(), 1).toString();
            new BookDetails(null, true, accessionNumber).setVisible(true);        // TODO add your handling code here:
        }else{
            JOptionPane.showMessageDialog(this, "Select Book First");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bookDetailButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchBook dialog = new SearchBook(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton accessionNumberRadio;
    private javax.swing.JRadioButton authorRadio;
    private javax.swing.JButton bookDetailButton;
    private javax.swing.JButton bookHistoryButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton categoryRadio;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton orderBookButton;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton searchButton;
    private javax.swing.ButtonGroup searchByButtonGroup;
    private javax.swing.JPanel searchByPanel;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JRadioButton titleRadio;
    // End of variables declaration//GEN-END:variables

public static ArrayList<BookSearch> searchByTitle(String title) throws ClassNotFoundException, SQLException{
        ArrayList<BookSearch> bookSearch = BookTitleController.searchByTitle(title);
        bookSearch = BookTitleController.getBooksDetails(bookSearch);
        bookSearch = BookAuthorDetailController.getBooksDetails(bookSearch);
        
        bookSearch = BookController.getBookDetails(bookSearch);
        
        
        return bookSearch;
    }
    
    public static ArrayList<BookSearch> searchByAuthor(String name) throws ClassNotFoundException, SQLException{
         ArrayList<BookSearch> bookSearch = BookAuthorDetailController.searchByAuthor(name);
         bookSearch = BookTitleController.getBooksDetails(bookSearch);
         bookSearch = BookController.getBookDetails(bookSearch);
         bookSearch=BookAuthorDetailController.getBooksDetails(bookSearch);
         return bookSearch;
    }
    
     public static ArrayList<BookSearch> searchByCategory(String name) throws ClassNotFoundException, SQLException{
        ArrayList<BookSearch> bookSearch = BookPositionController.searchByCategory(name);
        bookSearch = BookTitleController.getBooksDetails(bookSearch);
        bookSearch = BookAuthorDetailController.getBooksDetails(bookSearch);
        bookSearch = BookController.getBookDetails(bookSearch);
        return bookSearch;
    }

    public static ArrayList<BookSearch> searchByAccessionNumber(String accessionNumber) throws ClassNotFoundException, SQLException{
        ArrayList<BookSearch> bookSearch = new ArrayList<BookSearch>();
        BookSearch book = new BookSearch(accessionNumber);
        bookSearch.add(book);
        bookSearch = BookTitleController.getBooksDetails(bookSearch);
        bookSearch = BookAuthorDetailController.getBooksDetails(bookSearch);
        bookSearch = BookController.getBookDetails(bookSearch);
        return bookSearch;
    }





}
