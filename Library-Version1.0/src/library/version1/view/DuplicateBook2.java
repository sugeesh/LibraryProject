/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package library.version1.view;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import library.version1.controller.AuthorController;
import library.version1.controller.BookAuthorDetailController;
import library.version1.controller.BookController;
import library.version1.controller.BookTitleController;
import library.version1.controller.CategoryController;
import library.version1.controller.PublisherController;
import library.version1.controller.SectionController;
import library.version1.extra.IdGenarate;
import library.version1.extra.SearchComboSpecial;
import library.version1.extra.Validate;
import library.version1.model.Author;
import library.version1.model.Book;
import library.version1.model.BookAuthorDetail;
import library.version1.model.BookDetail;
import library.version1.model.BookPosition;
import library.version1.model.BookTitle;


/**
 *
 * @author Neo_
 */
public class DuplicateBook2 extends javax.swing.JDialog {
    boolean accessionNumber=false;
    boolean title=true;
    boolean author=true;
    boolean section=true;
    boolean category=true;
    boolean publisher=true;
    boolean price=true;
    
    DefaultListModel authorListModel;
    DefaultListModel titleListModel;
    
    File imageFile=null;
    
    /**
     * Creates new form AddBook
     */
     public DuplicateBook2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        
        initComponents();
     }  
    
    public DuplicateBook2(java.awt.Frame parent, boolean modal,String accessionNumber) {
        super(parent, modal);
        
        initComponents();
        
        
        setResizable(false);
        setLocationRelativeTo(null);
        
        initAuthorCombo();
        initPublisherCombo();
        initCategoryCombo();  
        initSectionCombo();
        
        authorListModel=new DefaultListModel();
        authorList.setModel(authorListModel);
        
        
        titleListModel=new DefaultListModel();
        titleList.setModel(titleListModel);
      
        SearchComboSpecial searchCombo = new SearchComboSpecial();
        searchCombo.setSearchableCombo(authorCombo, true, addAuthorButton, nextButton1);
   
        titleText.requestFocus();
        
        setForm(accessionNumber);
                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBookTabedPane = new javax.swing.JTabbedPane();
        bookDetailPanel = new javax.swing.JPanel();
        accessionNumberLabel = new javax.swing.JLabel();
        titleText = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        accessionNumberText = new javax.swing.JTextField();
        authorLabel = new javax.swing.JLabel();
        addAuthorButton = new javax.swing.JButton();
        removeAuthorButton = new javax.swing.JButton();
        authorCombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        authorList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        titleList = new javax.swing.JList();
        addTitleButton = new javax.swing.JButton();
        removeTitleButton = new javax.swing.JButton();
        nextButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        changeImageButton = new javax.swing.JButton();
        bookPositionDetailPanel = new javax.swing.JPanel();
        sectionNameLabel = new javax.swing.JLabel();
        sectionNameCombo = new javax.swing.JComboBox();
        addSectionButton = new javax.swing.JButton();
        addCetegoryButton = new javax.swing.JButton();
        categoryCombo = new javax.swing.JComboBox();
        categoryLabel = new javax.swing.JLabel();
        nextButton2 = new javax.swing.JButton();
        categoryText = new javax.swing.JTextField();
        backButton1 = new javax.swing.JButton();
        publishingDetailsPanel = new javax.swing.JPanel();
        publisherLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        publisherCombo = new javax.swing.JComboBox();
        addPublisherButton = new javax.swing.JButton();
        yearLabel = new javax.swing.JLabel();
        publishingPlaceLabel = new javax.swing.JLabel();
        publishedPlaceText = new javax.swing.JTextField();
        donatedBookCheckBox = new javax.swing.JCheckBox();
        expireBookCheckBox = new javax.swing.JCheckBox();
        yearText = new javax.swing.JTextField();
        backButton2 = new javax.swing.JButton();
        headLabel = new javax.swing.JLabel();
        addBookButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bookDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Book Detail"));

        accessionNumberLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        accessionNumberLabel.setText("Accession Number");

        titleText.setNextFocusableComponent(authorCombo);
        titleText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleTextActionPerformed(evt);
            }
        });
        titleText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                titleTextKeyReleased(evt);
            }
        });

        titleLabel.setText("Title");

        accessionNumberText.setNextFocusableComponent(titleText);
        accessionNumberText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessionNumberTextActionPerformed(evt);
            }
        });
        accessionNumberText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                accessionNumberTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                accessionNumberTextKeyReleased(evt);
            }
        });

        authorLabel.setText("Author");

        addAuthorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addAuthorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/user-add-icon.png"))); // NOI18N
        addAuthorButton.setText("Add to the List");
        addAuthorButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addAuthorButton.setFocusable(false);
        addAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorButtonActionPerformed(evt);
            }
        });

        removeAuthorButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        removeAuthorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/user-remove-icon.png"))); // NOI18N
        removeAuthorButton.setText("Remove From List");
        removeAuthorButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeAuthorButton.setFocusable(false);
        removeAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAuthorButtonActionPerformed(evt);
            }
        });

        authorCombo.setEditable(true);
        authorCombo.setToolTipText("");
        authorCombo.setNextFocusableComponent(nextButton1);
        authorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorComboActionPerformed(evt);
            }
        });
        authorCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                authorComboFocusLost(evt);
            }
        });
        authorCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                authorComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                authorComboKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorComboKeyTyped(evt);
            }
        });

        authorList.setBackground(new java.awt.Color(204, 204, 204));
        authorList.setFocusable(false);
        authorList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                authorListFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(authorList);

        jScrollPane4.setEnabled(false);

        titleList.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane4.setViewportView(titleList);

        addTitleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Actions-list-add-icon.png"))); // NOI18N
        addTitleButton.setText("Add to the List");
        addTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTitleButtonActionPerformed(evt);
            }
        });

        removeTitleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Remove-icon.png"))); // NOI18N
        removeTitleButton.setText("Remove From List");
        removeTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTitleButtonActionPerformed(evt);
            }
        });

        nextButton1.setText("Next >>");
        nextButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButton1ActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Cover Image"));
        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        changeImageButton.setBorder(null);
        changeImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeImageButtonActionPerformed(evt);
            }
        });
        jPanel7.add(changeImageButton);

        javax.swing.GroupLayout bookDetailPanelLayout = new javax.swing.GroupLayout(bookDetailPanel);
        bookDetailPanel.setLayout(bookDetailPanelLayout);
        bookDetailPanelLayout.setHorizontalGroup(
            bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookDetailPanelLayout.createSequentialGroup()
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(addTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                    .addComponent(accessionNumberLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(accessionNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                    .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(authorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addAuthorButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(nextButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(removeTitleButton)
                            .addComponent(removeAuthorButton))))
                .addGap(42, 42, 42))
        );
        bookDetailPanelLayout.setVerticalGroup(
            bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessionNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accessionNumberText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeTitleButton)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(authorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(authorCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAuthorButton))
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(removeAuthorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bookDetailPanelLayout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE)))
                .addContainerGap())
        );

        addBookTabedPane.addTab("Book Detail", bookDetailPanel);

        bookPositionDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("BookPosition"));

        sectionNameLabel.setText("Section");

        sectionNameCombo.setNextFocusableComponent(categoryCombo);
        sectionNameCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                sectionNameComboPopupMenuWillBecomeInvisible(evt);
            }
        });
        sectionNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionNameComboActionPerformed(evt);
            }
        });
        sectionNameCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sectionNameComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sectionNameComboKeyReleased(evt);
            }
        });

        addSectionButton.setText("New Section");
        addSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSectionButtonActionPerformed(evt);
            }
        });

        addCetegoryButton.setText("New Cetegory");
        addCetegoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCetegoryButtonActionPerformed(evt);
            }
        });

        categoryCombo.setNextFocusableComponent(nextButton2);
        categoryCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                categoryComboPopupMenuWillBecomeInvisible(evt);
            }
        });
        categoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryComboActionPerformed(evt);
            }
        });
        categoryCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                categoryComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                categoryComboKeyReleased(evt);
            }
        });

        categoryLabel.setText("Category");

        nextButton2.setText("Next >>");
        nextButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButton2ActionPerformed(evt);
            }
        });
        nextButton2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nextButton2FocusGained(evt);
            }
        });

        categoryText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryTextActionPerformed(evt);
            }
        });
        categoryText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                categoryTextKeyReleased(evt);
            }
        });

        backButton1.setText("<< Back");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });
        backButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                backButton1FocusGained(evt);
            }
        });

        javax.swing.GroupLayout bookPositionDetailPanelLayout = new javax.swing.GroupLayout(bookPositionDetailPanel);
        bookPositionDetailPanel.setLayout(bookPositionDetailPanelLayout);
        bookPositionDetailPanelLayout.setHorizontalGroup(
            bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPositionDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sectionNameLabel)
                    .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(bookPositionDetailPanelLayout.createSequentialGroup()
                        .addComponent(categoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sectionNameCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCetegoryButton)
                    .addComponent(addSectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(262, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPositionDetailPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(backButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        bookPositionDetailPanelLayout.setVerticalGroup(
            bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPositionDetailPanelLayout.createSequentialGroup()
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookPositionDetailPanelLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sectionNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(bookPositionDetailPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(sectionNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPositionDetailPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addSectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCetegoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                .addGroup(bookPositionDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nextButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        addBookTabedPane.addTab("Book Position", bookPositionDetailPanel);

        publishingDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Publishing Details"));
        publishingDetailsPanel.setDoubleBuffered(false);

        publisherLabel.setText("Publisher");

        priceLabel.setText("Price");

        priceText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        priceText.setNextFocusableComponent(sectionNameCombo);
        priceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTextActionPerformed(evt);
            }
        });
        priceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                priceTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceTextKeyReleased(evt);
            }
        });

        publisherCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        publisherCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                publisherComboPopupMenuWillBecomeInvisible(evt);
            }
        });
        publisherCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherComboActionPerformed(evt);
            }
        });
        publisherCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                publisherComboKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                publisherComboKeyReleased(evt);
            }
        });

        addPublisherButton.setText("New Publisher");
        addPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPublisherButtonActionPerformed(evt);
            }
        });

        yearLabel.setText("Published Year");

        publishingPlaceLabel.setText("Published Place");

        publishedPlaceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishedPlaceTextActionPerformed(evt);
            }
        });

        donatedBookCheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        donatedBookCheckBox.setText("Donated Book");

        expireBookCheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        expireBookCheckBox.setText("Misplaced Book");

        backButton2.setText("<< Back");
        backButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton2ActionPerformed(evt);
            }
        });
        backButton2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                backButton2FocusGained(evt);
            }
        });

        javax.swing.GroupLayout publishingDetailsPanelLayout = new javax.swing.GroupLayout(publishingDetailsPanel);
        publishingDetailsPanel.setLayout(publishingDetailsPanelLayout);
        publishingDetailsPanelLayout.setHorizontalGroup(
            publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, publishingDetailsPanelLayout.createSequentialGroup()
                .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(publishingDetailsPanelLayout.createSequentialGroup()
                        .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(publishingDetailsPanelLayout.createSequentialGroup()
                        .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publishingPlaceLabel)
                            .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(publishedPlaceText)
                            .addComponent(yearText))))
                .addGap(18, 18, 18)
                .addComponent(publisherLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expireBookCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(publishingDetailsPanelLayout.createSequentialGroup()
                        .addComponent(publisherCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(donatedBookCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(publishingDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        publishingDetailsPanelLayout.setVerticalGroup(
            publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(publishingDetailsPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publisherCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPublisherButton)
                    .addComponent(publisherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publishingPlaceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publishedPlaceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(publishingDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(donatedBookCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(expireBookCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(backButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addBookTabedPane.addTab("Publishing Details", publishingDetailsPanel);

        headLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        headLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AddBook.png"))); // NOI18N
        headLabel.setText("Duplicate Book");

        addBookButton.setText("Add Book");
        addBookButton.setEnabled(false);
        addBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBookTabedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBookTabedPane)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void setForm(String accessionNumber){
        try {
            BookDetail bookDetail= BookController.getBookDetail(accessionNumber);
            bookDetail= BookAuthorDetailController.getAuthorForBook(bookDetail);
            bookDetail= BookTitleController.getTitleForBook(bookDetail);
        
            //accessionNumberText.setText(bookDetail.getAccessionNumber());
            ArrayList<String> titleArray = bookDetail.getTitle();
            for(String title : titleArray){
                titleListModel.addElement(title);
            }
            ArrayList<String> authorArray = bookDetail.getAuthorName();
            for(String author : authorArray){
                authorListModel.addElement(author);
            }
            
            publishedPlaceText.setText(bookDetail.getPublishedPlace());
            donatedBookCheckBox.setSelected(bookDetail.isDonation());
            expireBookCheckBox.setSelected(bookDetail.isExpired());
            sectionNameCombo.setSelectedItem(bookDetail.getSectionName());
            categoryCombo.setSelectedItem(bookDetail.getCategoryName());
            publisherCombo.setSelectedItem(bookDetail.getPublisherName());
            String yearString = bookDetail.getPublishedYear();
            yearText.setText(yearString.substring(0, 4));
            priceText.setText(bookDetail.getPrice() + "");
            
            File file = new File("./src/image/" + accessionNumber + ".jpg");
            ImageIcon picture = new ImageIcon("./src/image/" + accessionNumber + ".jpg");
            if (!file.exists()) {
                picture = new ImageIcon("./src/image/book.jpg");
            }
            Image image = picture.getImage();
            image = image.getScaledInstance(changeImageButton.getWidth(), changeImageButton.getHeight(), image.SCALE_SMOOTH);
            picture.setImage(image);
            changeImageButton.setIcon(picture);
        } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
        
        
        
    }
    
    
    private void addBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookButtonActionPerformed
        String accessionNumber=accessionNumberText.getText();             // TODO add your handling code here:
        
        ArrayList<BookTitle> titleList=new ArrayList<BookTitle>();
        
        for(int i=0;i<titleListModel.getSize();i++){
          String title=titleListModel.getElementAt(i).toString();
          BookTitle bookTitle = new BookTitle();
          bookTitle.setAccessionNumber(accessionNumber);
          bookTitle.setTitle(title);
          
          titleList.add(bookTitle);
        }
        
        String publishedYear=yearText.getText();
        double price= Double.parseDouble(priceText.getText());
        
        
        ArrayList<BookAuthorDetail> authorId=new ArrayList<BookAuthorDetail>();
        try {
            for(int i=0;i<authorListModel.getSize();i++){
                    String name=authorListModel.getElementAt(i).toString();
                    if(AuthorController.checkAuthor(name)){
                        String id=AuthorController.getAuthorId(authorListModel.getElementAt(i).toString());
                        BookAuthorDetail bookAuthorDetail = new BookAuthorDetail();
                        bookAuthorDetail.setAId(id);
                        bookAuthorDetail.setAccessionNumber(accessionNumber);
                        authorId.add(bookAuthorDetail);
                    }else{
                        String id =IdGenarate.getId("A", "AId","Author");
                        Author author= new Author(id,name);
                        AuthorController.addAuthor(author);
                        BookAuthorDetail bookAuthorDetail = new BookAuthorDetail();
                        bookAuthorDetail.setAId(id);
                        bookAuthorDetail.setAccessionNumber(accessionNumber);
                        authorId.add(bookAuthorDetail);
                    }
            }              
       } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage());
       } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
       }
        
        
        String publisherId=null;
        try {
            publisherId=PublisherController.getPublisherId(publisherCombo.getSelectedItem().toString());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
        
        String sectionId=null;
        try {
            sectionId = SectionController.getSectionId(sectionNameCombo.getSelectedItem().toString());
            System.out.println("Right to section id choose");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
           JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
        
        String categoryId=null;
        try {
            categoryId = CategoryController.getCategoryId(categoryCombo.getSelectedItem().toString());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
        
        BookPosition bookPosition=new BookPosition(accessionNumber, sectionId, categoryId);
        Book book= new Book(accessionNumber,titleList,authorId,publishedYear,publisherId,price,categoryId,bookPosition,true,publishedPlaceText.getText(),donatedBookCheckBox.isSelected(),expireBookCheckBox.isSelected());
     
        BookController.addBook(book);
        //Add Image
        if (imageFile != null) {
            Path from = imageFile.toPath();     //convert from File to Path
            Path to = Paths.get("./src/image/" + accessionNumberText.getText() + ".jpg");; //convert from String to Path
            try {
                Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(AddBook.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        this.setVisible(false);

        
    }//GEN-LAST:event_addBookButtonActionPerformed

    private void addSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSectionButtonActionPerformed
        new AddSection(null,true).setVisible(true);  // TODO add your handling code here:
        initSectionCombo();
        sectionNameCombo.setSelectedIndex(sectionNameCombo.getItemCount()-1);
        enableEditButton();     
    }//GEN-LAST:event_addSectionButtonActionPerformed

    private void addCetegoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCetegoryButtonActionPerformed
        new AddCategory(null,true).setVisible(true);         // TODO add your handling code here:
        initCategoryCombo();  
        categoryCombo.setSelectedIndex(categoryCombo.getItemCount()-1);
        enableEditButton();     
    }//GEN-LAST:event_addCetegoryButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void sectionNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionNameComboActionPerformed
         if(sectionNameCombo.getSelectedIndex()!=0){               // TODO add your handling code here:
             section=true;
        }else{
             section=false;
        } 
        enableEditButton();// TODO add your handling code here:
    }//GEN-LAST:event_sectionNameComboActionPerformed

    private void categoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryComboActionPerformed
        if (categoryCombo.getSelectedIndex() != 0 && categoryCombo.getSelectedIndex() != -1) {
            try {
                categoryText.setText(CategoryController.getCategoryDewNumber(categoryCombo.getSelectedItem().toString()));
            } catch (SQLException ex) {
                Logger.getLogger(AddBook.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddBook.class.getName()).log(Level.SEVERE, null, ex);
            }

            category = true;
        } else {
            category = false;
        }
        enableEditButton();// TODO add your handling code here:
    }//GEN-LAST:event_categoryComboActionPerformed

    private void addPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPublisherButtonActionPerformed
        new AddPublisher(null,true).setVisible(true);     // TODO add your handling code here:
        initPublisherCombo();
        publisherCombo.setSelectedIndex(publisherCombo.getItemCount()-1);
        enableEditButton();     
    }//GEN-LAST:event_addPublisherButtonActionPerformed

    private void publisherComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherComboActionPerformed
        if(publisherCombo.getSelectedIndex()!=0){               // TODO add your handling code here:
            publisher=true;
        }else{
            publisher=false;
        }
        enableEditButton();                // TODO add your handling code here:
    }//GEN-LAST:event_publisherComboActionPerformed

    private void priceTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextKeyReleased
        if(!priceText.getText().isEmpty()){                // TODO add your handling code here:
            price=true;
        }else{
            price=false;
        }

        enableEditButton();
    }//GEN-LAST:event_priceTextKeyReleased

    private void priceTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextKeyPressed
        if(!Validate.validateFloatingPointNumbers(evt.getKeyChar()+"")){
            priceText.setEditable(false);
        }else{
            priceText.setEditable(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_priceTextKeyPressed

    private void priceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTextActionPerformed
        addBookButton.doClick();      // TODO add your handling code here:

    }//GEN-LAST:event_priceTextActionPerformed

    private void sectionNameComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sectionNameComboKeyReleased
             // TODO add your handling code here:
    }//GEN-LAST:event_sectionNameComboKeyReleased

    private void categoryComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_categoryComboKeyReleased
      // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboKeyReleased

    private void publisherComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_publisherComboKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_publisherComboKeyReleased

    private void sectionNameComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sectionNameComboKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_DOWN || evt.getKeyCode()==KeyEvent.VK_UP){
            sectionNameCombo.showPopup();
           
        }           // TODO add your handling code here:
    }//GEN-LAST:event_sectionNameComboKeyPressed

    private void categoryComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_categoryComboKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_DOWN || evt.getKeyCode()==KeyEvent.VK_UP){
            categoryCombo.showPopup();
           
        }          // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboKeyPressed

    private void publisherComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_publisherComboKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_DOWN || evt.getKeyCode()==KeyEvent.VK_UP){
            publisherCombo.showPopup();
           
        }     // TODO add your handling code here:
    }//GEN-LAST:event_publisherComboKeyPressed

    private void sectionNameComboPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_sectionNameComboPopupMenuWillBecomeInvisible
        categoryCombo.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_sectionNameComboPopupMenuWillBecomeInvisible

    private void categoryComboPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_categoryComboPopupMenuWillBecomeInvisible
        publisherCombo.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_categoryComboPopupMenuWillBecomeInvisible

    private void publisherComboPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_publisherComboPopupMenuWillBecomeInvisible
        yearText.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_publisherComboPopupMenuWillBecomeInvisible

    private void removeTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTitleButtonActionPerformed
        if(titleList.getSelectedIndex()>=0){
            titleListModel.remove(titleList.getSelectedIndex());
        }else{
            JOptionPane.showMessageDialog(this, "Please Select the Title");
        }

        if(titleListModel.getSize()==0){
            removeTitleButton.setEnabled(false);
            title=false;
        }else{
            removeTitleButton.setEnabled(true);
            title=true;
        }
        enableEditButton();          // TODO add your handling code here:
    }//GEN-LAST:event_removeTitleButtonActionPerformed

    private void addTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTitleButtonActionPerformed
        String title = titleText.getText();
        if(!titleText.getText().isEmpty()){
            titleListModel.addElement(title);
            removeTitleButton.setEnabled(true);
            titleList.setEnabled(true);
            this.title=true;
        }
        titleText.setText(null);
        titleText.requestFocus();
        enableEditButton();                // TODO add your handling code here:
    }//GEN-LAST:event_addTitleButtonActionPerformed

    private void authorComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorComboKeyReleased
      

        // TODO add your handling code here:
    }//GEN-LAST:event_authorComboKeyReleased

    private void authorComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorComboKeyPressed
                // TODO add your handling code here:
    }//GEN-LAST:event_authorComboKeyPressed

    private void authorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorComboActionPerformed
       
        // TODO add your handling code here:
    }//GEN-LAST:event_authorComboActionPerformed

    private void removeAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAuthorButtonActionPerformed
        if(authorList.getSelectedIndex()>=0){
            authorListModel.remove(authorList.getSelectedIndex());
        }else{
            JOptionPane.showMessageDialog(this, "Please Select the Author");
        }

        if(authorListModel.getSize()==0){
            removeAuthorButton.setEnabled(false);
            author=false;
        }else{
            removeAuthorButton.setEnabled(true);
            author=true;
        }
        enableEditButton();          // TODO add your handling code here:
    }//GEN-LAST:event_removeAuthorButtonActionPerformed

    private void addAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorButtonActionPerformed
        if(authorCombo.getSelectedItem()!=null){
            String name = authorCombo.getSelectedItem().toString();
            if(checkAuthorList(name)){
                authorListModel.addElement(name);
                removeAuthorButton.setEnabled(true);
                authorList.setEnabled(true);
                author=true;
            }
        }else{
            JOptionPane.showMessageDialog(this,"Please type aurthor name first");
        }
        enableEditButton();
        // TODO add your handling code here:
    }//GEN-LAST:event_addAuthorButtonActionPerformed

    private void accessionNumberTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accessionNumberTextKeyReleased
        if(!accessionNumberText.getText().isEmpty()){
            accessionNumber = true;
        }else{
            accessionNumber = false;
        }
        enableEditButton();
    }//GEN-LAST:event_accessionNumberTextKeyReleased

    private void accessionNumberTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accessionNumberTextKeyPressed
        if(!Validate.validateAccessionNumber(accessionNumberText.getText() +evt.getKeyChar()+"")){
            if(evt.getKeyCode()!=KeyEvent.VK_BACK_SPACE){
               accessionNumberText.setEditable(false);
           }else{
               accessionNumberText.setEditable(true);
           }
        }else{
            accessionNumberText.setEditable(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_accessionNumberTextKeyPressed

    private void accessionNumberTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessionNumberTextActionPerformed
        titleText.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_accessionNumberTextActionPerformed

    private void titleTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleTextKeyReleased

    }//GEN-LAST:event_titleTextKeyReleased

    private void titleTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleTextActionPerformed
        addTitleButton.doClick();       // TODO add your handling code here:

    }//GEN-LAST:event_titleTextActionPerformed

    private void authorComboFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_authorComboFocusLost
                // TODO add your handling code here:
    }//GEN-LAST:event_authorComboFocusLost

    private void nextButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButton1ActionPerformed
        addBookTabedPane.setSelectedIndex(1);        // TODO add your handling code here:
    }//GEN-LAST:event_nextButton1ActionPerformed

    private void authorComboKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorComboKeyTyped
       
              // TODO add your handling code here:
    }//GEN-LAST:event_authorComboKeyTyped

    private void authorListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_authorListFocusGained
              // TODO add your handling code here:
    }//GEN-LAST:event_authorListFocusGained

    private void nextButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButton2ActionPerformed
        addBookTabedPane.setSelectedIndex(2);            // TODO add your handling code here:
    }//GEN-LAST:event_nextButton2ActionPerformed

    private void nextButton2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nextButton2FocusGained
        nextButton2.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_nextButton2FocusGained

    private void publishedPlaceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishedPlaceTextActionPerformed
        publisherCombo.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_publishedPlaceTextActionPerformed

    private void changeImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeImageButtonActionPerformed
        JFileChooser openFileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("jpg File", "jpg");
        openFileChooser.setFileFilter(filter);
        openFileChooser.showOpenDialog(this);
        File file = openFileChooser.getSelectedFile();
        if (file != null) {
            this.imageFile = file;
            ImageIcon picture = new ImageIcon(file.getPath());
            Image image = picture.getImage();
            image = image.getScaledInstance(changeImageButton.getWidth(), changeImageButton.getHeight(), image.SCALE_SMOOTH);
            picture.setImage(image);
            changeImageButton.setIcon(picture);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_changeImageButtonActionPerformed

    private void categoryTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryTextActionPerformed

    private void categoryTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_categoryTextKeyReleased
        String dew = categoryText.getText();
        try {
            String name = CategoryController.getCategoryforDewNumber(dew); // TODO add your handling code here:
            if (name != null) {
                categoryCombo.setSelectedItem(name);
            } else {
                name = CategoryController.getCategoryforDewNumber("0" + dew);
                if (name != null) {
                    categoryCombo.setSelectedItem(name);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddBook.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddBook.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_categoryTextKeyReleased

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        addBookTabedPane.setSelectedIndex(0);
        accessionNumberText.requestFocus();
    }//GEN-LAST:event_backButton1ActionPerformed

    private void backButton1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_backButton1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_backButton1FocusGained

    private void backButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton2ActionPerformed
        addBookTabedPane.setSelectedIndex(1);
        sectionNameCombo.requestFocus();
    }//GEN-LAST:event_backButton2ActionPerformed

    private void backButton2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_backButton2FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_backButton2FocusGained
    
    private void enableEditButton(){
        if( title && author && section && category && publisher && price){
            addBookButton.setEnabled(true);
        }else{
            addBookButton.setEnabled(false);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DuplicateBook2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DuplicateBook2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DuplicateBook2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DuplicateBook2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DuplicateBook2 dialog = new DuplicateBook2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accessionNumberLabel;
    private javax.swing.JTextField accessionNumberText;
    private javax.swing.JButton addAuthorButton;
    private javax.swing.JButton addBookButton;
    private javax.swing.JTabbedPane addBookTabedPane;
    private javax.swing.JButton addCetegoryButton;
    private javax.swing.JButton addPublisherButton;
    private javax.swing.JButton addSectionButton;
    private javax.swing.JButton addTitleButton;
    private javax.swing.JComboBox authorCombo;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JList authorList;
    private javax.swing.JButton backButton1;
    private javax.swing.JButton backButton2;
    private javax.swing.JPanel bookDetailPanel;
    private javax.swing.JPanel bookPositionDetailPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox categoryCombo;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JTextField categoryText;
    private javax.swing.JButton changeImageButton;
    private javax.swing.JCheckBox donatedBookCheckBox;
    private javax.swing.JCheckBox expireBookCheckBox;
    private javax.swing.JLabel headLabel;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton nextButton1;
    private javax.swing.JButton nextButton2;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField priceText;
    private javax.swing.JTextField publishedPlaceText;
    private javax.swing.JComboBox publisherCombo;
    private javax.swing.JLabel publisherLabel;
    private javax.swing.JPanel publishingDetailsPanel;
    private javax.swing.JLabel publishingPlaceLabel;
    private javax.swing.JButton removeAuthorButton;
    private javax.swing.JButton removeTitleButton;
    private javax.swing.JComboBox sectionNameCombo;
    private javax.swing.JLabel sectionNameLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JList titleList;
    private javax.swing.JTextField titleText;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables

    private void initAuthorCombo() {
        try {
            authorCombo.removeAllItems();
            ArrayList<String> authorList=AuthorController.getAuthorNames();
            authorCombo.addItem(null);
            if(authorList!=null){
                for(String name : authorList){
                    authorCombo.addItem(name);
                }
            }
            System.out.println(authorList);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
        
        
    }

    private void initPublisherCombo() {
        try {
            publisherCombo.removeAllItems();
            publisherCombo.addItem("<Choose Publisher>");
            ArrayList<String> publisherList=PublisherController.getPublisherNames();
                if(publisherList!=null){
                    for(String name : publisherList){
                        publisherCombo.addItem(name);
                    }
                }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
    }

    private void initCategoryCombo() {
        try {
            categoryCombo.removeAllItems();
            categoryCombo.addItem("<Choose Category>");
            ArrayList<String> categoryList=CategoryController.getCategoryNames();
                   if(categoryList!=null){
                       for(String name : categoryList){
                           categoryCombo.addItem(name);
                       }
                   }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
    }
    
    private void initSectionCombo(){
        try {
            sectionNameCombo.removeAllItems();
            sectionNameCombo.addItem("<Choose Section>");
            ArrayList<String> sectionList=SectionController.getSectionNames();
                if(sectionList!=null){
                    for(String name : sectionList){
                        sectionNameCombo.addItem(name);
                    }
                }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Database Error");
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Database Connection Error");
        }
    }

    private boolean checkAuthorList(String name) {
        boolean check=true;
        for(int i=0;i<authorListModel.getSize();i++){
            if(authorListModel.getElementAt(i).toString().trim().equals(name.trim())){
                check=false;
                break;
            }
        }
        return check;
    }

   
    
}
