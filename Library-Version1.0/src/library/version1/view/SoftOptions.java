/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package library.version1.view;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import library.version1.controller.CategoryController;
import library.version1.controller.GuarantorController;
import library.version1.controller.MemberTypeController;
import library.version1.controller.PublisherController;
import library.version1.controller.SectionController;
import library.version1.model.Guarantor;
import library.version1.model.MemberType;
import library.version1.model.Publisher;
import library.version1.model.Section;

/**
 *
 * @author Neo_
 */
public class SoftOptions extends javax.swing.JDialog {
        DefaultTableModel guarantorTableModel;
        DefaultTableModel memberTypeTableModel;
        DefaultTableModel publisherTableModel;
        DefaultTableModel sectionTableModel;
    
    
    /**
     * Creates new form SoftOptions
     */
    public SoftOptions(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        setLocationRelativeTo(parent);
        
        guarantorTableModel = (DefaultTableModel)guarantorTable.getModel();
        memberTypeTableModel = (DefaultTableModel)memberTypeTable.getModel();
        publisherTableModel = (DefaultTableModel)publisherTable.getModel();
        sectionTableModel = (DefaultTableModel)sectionTable.getModel();
       
        setGuarantorTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        optionsTabPane = new javax.swing.JTabbedPane();
        guarantorPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        guarantorTable = new javax.swing.JTable();
        deleteGuarantorButton = new javax.swing.JButton();
        editGuarantorButton = new javax.swing.JButton();
        addGuarantorButton = new javax.swing.JButton();
        guarantorReloadButton = new javax.swing.JButton();
        memberTypePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        memberTypeTable = new javax.swing.JTable();
        deleteMemberTypeButton = new javax.swing.JButton();
        editMemberTypeButton = new javax.swing.JButton();
        addMemberTypeButton = new javax.swing.JButton();
        memberTypeReloadButton = new javax.swing.JButton();
        managePublishersPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        publisherTable = new javax.swing.JTable();
        deletePublisherButton = new javax.swing.JButton();
        editPublisherButton = new javax.swing.JButton();
        addPublisherButton = new javax.swing.JButton();
        publisherReloadButton = new javax.swing.JButton();
        manageSectionPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sectionTable = new javax.swing.JTable();
        deleteSectionButton = new javax.swing.JButton();
        editSectionButton = new javax.swing.JButton();
        addSectionButton = new javax.swing.JButton();
        sectionReloadButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Options");

        optionsTabPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optionsTabPaneStateChanged(evt);
            }
        });

        guarantorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GId", "Name", "Status", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(guarantorTable);

        deleteGuarantorButton.setText("Delete");
        deleteGuarantorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGuarantorButtonActionPerformed(evt);
            }
        });

        editGuarantorButton.setText("Edit");
        editGuarantorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGuarantorButtonActionPerformed(evt);
            }
        });

        addGuarantorButton.setText("Add");
        addGuarantorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGuarantorButtonActionPerformed(evt);
            }
        });

        guarantorReloadButton.setText("Reload");
        guarantorReloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guarantorReloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guarantorPanelLayout = new javax.swing.GroupLayout(guarantorPanel);
        guarantorPanel.setLayout(guarantorPanelLayout);
        guarantorPanelLayout.setHorizontalGroup(
            guarantorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guarantorPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(guarantorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guarantorPanelLayout.createSequentialGroup()
                        .addComponent(guarantorReloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addGuarantorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editGuarantorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteGuarantorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        guarantorPanelLayout.setVerticalGroup(
            guarantorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guarantorPanelLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(guarantorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(guarantorReloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(addGuarantorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editGuarantorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteGuarantorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        optionsTabPane.addTab("Manage Guarantor", guarantorPanel);

        memberTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MId", "Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(memberTypeTable);

        deleteMemberTypeButton.setText("Delete");
        deleteMemberTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMemberTypeButtonActionPerformed(evt);
            }
        });

        editMemberTypeButton.setText("Edit");
        editMemberTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMemberTypeButtonActionPerformed(evt);
            }
        });

        addMemberTypeButton.setText("Add");
        addMemberTypeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberTypeButtonActionPerformed(evt);
            }
        });

        memberTypeReloadButton.setText("Reload");
        memberTypeReloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberTypeReloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout memberTypePanelLayout = new javax.swing.GroupLayout(memberTypePanel);
        memberTypePanel.setLayout(memberTypePanelLayout);
        memberTypePanelLayout.setHorizontalGroup(
            memberTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memberTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(memberTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMemberTypeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(memberTypeReloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(editMemberTypeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteMemberTypeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        memberTypePanelLayout.setVerticalGroup(
            memberTypePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, memberTypePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addGap(23, 23, 23))
            .addGroup(memberTypePanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(memberTypeReloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addMemberTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(editMemberTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(deleteMemberTypeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionsTabPane.addTab("Manage Member Types", memberTypePanel);

        publisherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PId", "Name"
            }
        ));
        jScrollPane3.setViewportView(publisherTable);

        deletePublisherButton.setText("Delete");
        deletePublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePublisherButtonActionPerformed(evt);
            }
        });

        editPublisherButton.setText("Edit");
        editPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPublisherButtonActionPerformed(evt);
            }
        });

        addPublisherButton.setText("Add");
        addPublisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPublisherButtonActionPerformed(evt);
            }
        });

        publisherReloadButton.setText("Reload");
        publisherReloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherReloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managePublishersPanelLayout = new javax.swing.GroupLayout(managePublishersPanel);
        managePublishersPanel.setLayout(managePublishersPanelLayout);
        managePublishersPanelLayout.setHorizontalGroup(
            managePublishersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePublishersPanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(managePublishersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, managePublishersPanelLayout.createSequentialGroup()
                        .addComponent(publisherReloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editPublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletePublisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        managePublishersPanelLayout.setVerticalGroup(
            managePublishersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managePublishersPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(managePublishersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(publisherReloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(deletePublisherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editPublisherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addPublisherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        optionsTabPane.addTab("Manage Publishers", managePublishersPanel);

        sectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SId", "Name"
            }
        ));
        jScrollPane4.setViewportView(sectionTable);

        deleteSectionButton.setText("Delete");
        deleteSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSectionButtonActionPerformed(evt);
            }
        });

        editSectionButton.setText("Edit");
        editSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSectionButtonActionPerformed(evt);
            }
        });

        addSectionButton.setText("Add");
        addSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSectionButtonActionPerformed(evt);
            }
        });

        sectionReloadButton.setText("Reload");
        sectionReloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionReloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageSectionPanelLayout = new javax.swing.GroupLayout(manageSectionPanel);
        manageSectionPanel.setLayout(manageSectionPanelLayout);
        manageSectionPanelLayout.setHorizontalGroup(
            manageSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addSectionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sectionReloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(editSectionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteSectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        manageSectionPanelLayout.setVerticalGroup(
            manageSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageSectionPanelLayout.createSequentialGroup()
                .addGroup(manageSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageSectionPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageSectionPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(sectionReloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addSectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editSectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteSectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        optionsTabPane.addTab("Manage Sections", manageSectionPanel);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionsTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(optionsTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void optionsTabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optionsTabPaneStateChanged
        int tab = optionsTabPane.getSelectedIndex();
        switch(tab){
            
            case 1 : setMemberTypeTable(); break;
            case 2 : setPublisherTable(); break;
            case 3 : setSectionTable(); break;
         }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_optionsTabPaneStateChanged

    private void addGuarantorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGuarantorButtonActionPerformed
        new AddGuarantor(null, true).setVisible(true);           // TODO add your handling code here:
    }//GEN-LAST:event_addGuarantorButtonActionPerformed

    private void addMemberTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberTypeButtonActionPerformed
        new AddMemberType(null, true).setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_addMemberTypeButtonActionPerformed

    private void addPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPublisherButtonActionPerformed
         new AddPublisher(null, true).setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_addPublisherButtonActionPerformed

    private void addSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSectionButtonActionPerformed
         new AddSection(null, true).setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_addSectionButtonActionPerformed

    private void editGuarantorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGuarantorButtonActionPerformed
        if(guarantorTable.getSelectedRow()!=-1){
            String gId = guarantorTable.getValueAt(guarantorTable.getSelectedRow(), 0).toString();
            String name = guarantorTable.getValueAt(guarantorTable.getSelectedRow(), 1).toString();
            String status = guarantorTable.getValueAt(guarantorTable.getSelectedRow(), 2).toString();
            String address = guarantorTable.getValueAt(guarantorTable.getSelectedRow(), 3).toString();
            Guarantor guarantor = new Guarantor(gId, name, status, address);
            new EditGuarantor(null,true,guarantor).setVisible(true);      
        }else{
            JOptionPane.showMessageDialog(this, "Please select Guarantor");
        }
                                                                                // TODO add your handling code here:
    }//GEN-LAST:event_editGuarantorButtonActionPerformed

    private void deleteGuarantorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGuarantorButtonActionPerformed
        if(guarantorTable.getSelectedRow()!=-1){
            int selectedRow= guarantorTable.getSelectedRow();
            String gId=guarantorTableModel.getValueAt(selectedRow,0).toString();

            int option =JOptionPane.showConfirmDialog(this, "Are you sure to this Guarantor ?", "Delete Guarantor", JOptionPane.YES_NO_OPTION);        // TODO add your handling code here:
            if(option==JOptionPane.YES_OPTION){
                int warn =JOptionPane.showConfirmDialog(this, "You will loose your all Members relation with Guarantor !", "Delete Guarantor", JOptionPane.OK_CANCEL_OPTION);        // TODO add your handling code here:
                if(warn==JOptionPane.OK_OPTION){
                    try {
                        int result =GuarantorController.deleteGuarantor(gId);
                        if(result==1){
                            JOptionPane.showMessageDialog(this, "Guarantor Deleted ");
                            setGuarantorTable();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Select Guarantor First");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_deleteGuarantorButtonActionPerformed

    private void editMemberTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberTypeButtonActionPerformed
        if(memberTypeTable.getSelectedRow()!=-1){
            String mId = memberTypeTable.getValueAt(memberTypeTable.getSelectedRow(), 0).toString();
            String type = memberTypeTable.getValueAt(memberTypeTable.getSelectedRow(), 1).toString();
            
            MemberType memberType = new MemberType(mId, type);
            
            new EditMemberType(null,true,memberType).setVisible(true);      
        }else{
            JOptionPane.showMessageDialog(this, "Please select MemberType");
        } 
        setMemberTypeTable();       // TODO add your handling code here:
    }//GEN-LAST:event_editMemberTypeButtonActionPerformed

    private void deleteMemberTypeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMemberTypeButtonActionPerformed
        if(memberTypeTable.getSelectedRow()!=-1){
            int selectedRow= memberTypeTable.getSelectedRow();
            String mId=memberTypeTableModel.getValueAt(selectedRow,0).toString();

            int option =JOptionPane.showConfirmDialog(this, "Are you sure to this MemberType ?", "Delete MemberType", JOptionPane.YES_NO_OPTION);        // TODO add your handling code here:
            if(option==JOptionPane.YES_OPTION){
                int warn =JOptionPane.showConfirmDialog(this, "You will loose your all Members relation with MemberType !", "Delete MemberType", JOptionPane.OK_CANCEL_OPTION);        // TODO add your handling code here:
                if(warn==JOptionPane.OK_OPTION){
                    try {
                        int result =MemberTypeController.deleteMemberType(mId);
                        if(result==1){
                            JOptionPane.showMessageDialog(this, "MemberType Deleted ");
                            setMemberTypeTable();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Select MemberType First");
        }           // TODO add your handling code here:
    }//GEN-LAST:event_deleteMemberTypeButtonActionPerformed

    private void editPublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPublisherButtonActionPerformed
        if(publisherTable.getSelectedRow()!=-1){
            String pId = publisherTable.getValueAt(publisherTable.getSelectedRow(), 0).toString();
            String name = publisherTable.getValueAt(publisherTable.getSelectedRow(), 1).toString();
            
            Publisher publisher = new Publisher(pId, name);
            
            new EditPublisher(null,true,publisher).setVisible(true);      
        }else{
            JOptionPane.showMessageDialog(this, "Please select Publisher");
        } 
        setPublisherTable();          // TODO add your handling code here:
    }//GEN-LAST:event_editPublisherButtonActionPerformed

    private void deletePublisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePublisherButtonActionPerformed
        if(publisherTable.getSelectedRow()!=-1){
            int selectedRow= publisherTable.getSelectedRow();
            String pId=publisherTableModel.getValueAt(selectedRow,0).toString();

            int option =JOptionPane.showConfirmDialog(this, "Are you sure to this Publisher ?", "Delete Publisher", JOptionPane.YES_NO_OPTION);        // TODO add your handling code here:
            if(option==JOptionPane.YES_OPTION){
                int warn =JOptionPane.showConfirmDialog(this, "You will loose your all Books relation with Publisher !", "Delete Publisher", JOptionPane.OK_CANCEL_OPTION);        // TODO add your handling code here:
                if(warn==JOptionPane.OK_OPTION){
                    try {
                        int result =PublisherController.deletePublisher(pId);
                        if(result==1){
                            JOptionPane.showMessageDialog(this, "Publisher Deleted ");
                            setPublisherTable();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Select Publisher First");
        }            // TODO add your handling code here:
    }//GEN-LAST:event_deletePublisherButtonActionPerformed

    private void editSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSectionButtonActionPerformed
        if(sectionTable.getSelectedRow()!=-1){
            String mId = sectionTable.getValueAt(sectionTable.getSelectedRow(), 0).toString();
            String name = sectionTable.getValueAt(sectionTable.getSelectedRow(), 1).toString();
            
            Section section = new Section(mId, name);
            
            new EditSection(null,true,section).setVisible(true);      
        }else{
            JOptionPane.showMessageDialog(this, "Please select Section");
        } 
        setSectionTable();          // TODO add your handling code here:
    }//GEN-LAST:event_editSectionButtonActionPerformed

    private void deleteSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSectionButtonActionPerformed
        if(sectionTable.getSelectedRow()!=-1){
            int selectedRow= sectionTable.getSelectedRow();
            String sId=sectionTableModel.getValueAt(selectedRow,0).toString();

            int option =JOptionPane.showConfirmDialog(this, "Are you sure to this Section ?", "Delete Section", JOptionPane.YES_NO_OPTION);        // TODO add your handling code here:
            if(option==JOptionPane.YES_OPTION){
                int warn =JOptionPane.showConfirmDialog(this, "You will loose your all Books relation with Section !", "Delete Section", JOptionPane.OK_CANCEL_OPTION);        // TODO add your handling code here:
                if(warn==JOptionPane.OK_OPTION){
                    try {
                        int result =SectionController.deleteSection(sId);
                        if(result==1){
                            JOptionPane.showMessageDialog(this, "Section Deleted ");
                            setSectionTable();
                        }
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
            
        }else{
            JOptionPane.showMessageDialog(this, "Select Section First");
        }              // TODO add your handling code here:
    }//GEN-LAST:event_deleteSectionButtonActionPerformed

    private void guarantorReloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guarantorReloadButtonActionPerformed
        setGuarantorTable();        // TODO add your handling code here:
    }//GEN-LAST:event_guarantorReloadButtonActionPerformed

    private void memberTypeReloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberTypeReloadButtonActionPerformed
        setMemberTypeTable();        // TODO add your handling code here:
    }//GEN-LAST:event_memberTypeReloadButtonActionPerformed

    private void publisherReloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherReloadButtonActionPerformed
        setPublisherTable();        // TODO add your handling code here:
    }//GEN-LAST:event_publisherReloadButtonActionPerformed

    private void sectionReloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionReloadButtonActionPerformed
        setSectionTable();        // TODO add your handling code here:
    }//GEN-LAST:event_sectionReloadButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void setGuarantorTable() {
        try {
            int rowCount = guarantorTable.getRowCount();
            for(int i=0;i<rowCount;i++){
                guarantorTableModel.removeRow(0);
            }
            ArrayList<Guarantor> list = GuarantorController.getAllGuarantorDetails();
            for(Guarantor guarantor : list){
                Object[] row = {guarantor.getId(),guarantor.getName(),guarantor.getStatus(),guarantor.getAddress()};
                guarantorTableModel.addRow(row);
            }
        
        }catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void setMemberTypeTable() {
        try {
            int rowCount = memberTypeTable.getRowCount();
            for(int i=0;i<rowCount;i++){
                memberTypeTableModel.removeRow(0);
            }
            ArrayList<MemberType> list = MemberTypeController.getAllMemberTypesDetail();
            for(MemberType memberType : list){
                Object[] row = {memberType.getId(),memberType.getType()};
                memberTypeTableModel.addRow(row);
            }
        
        }catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void setPublisherTable() {
        try {
            int rowCount = publisherTable.getRowCount();
            for(int i=0;i<rowCount;i++){
                publisherTableModel.removeRow(0);
            }
            ArrayList<Publisher> list = PublisherController.getAllPublisherDetails();
            for(Publisher publisher : list){
                Object[] row = {publisher.getId(),publisher.getName()};
                publisherTableModel.addRow(row);
            }
        
        }catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void setSectionTable() {
        try {
            int rowCount = sectionTable.getRowCount();
            for(int i=0;i<rowCount;i++){
                sectionTableModel.removeRow(0);
            }
            ArrayList<Section> list = SectionController.getAllSectionDetails();
            for(Section section : list){
                Object[] row = {section.getId(),section.getName()};
                sectionTableModel.addRow(row);
            }
        
        }catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Database Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Connection Error ","Error Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SoftOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SoftOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SoftOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SoftOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SoftOptions dialog = new SoftOptions(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGuarantorButton;
    private javax.swing.JButton addMemberTypeButton;
    private javax.swing.JButton addPublisherButton;
    private javax.swing.JButton addSectionButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deleteGuarantorButton;
    private javax.swing.JButton deleteMemberTypeButton;
    private javax.swing.JButton deletePublisherButton;
    private javax.swing.JButton deleteSectionButton;
    private javax.swing.JButton editGuarantorButton;
    private javax.swing.JButton editMemberTypeButton;
    private javax.swing.JButton editPublisherButton;
    private javax.swing.JButton editSectionButton;
    private javax.swing.JPanel guarantorPanel;
    private javax.swing.JButton guarantorReloadButton;
    private javax.swing.JTable guarantorTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel managePublishersPanel;
    private javax.swing.JPanel manageSectionPanel;
    private javax.swing.JPanel memberTypePanel;
    private javax.swing.JButton memberTypeReloadButton;
    private javax.swing.JTable memberTypeTable;
    private javax.swing.JTabbedPane optionsTabPane;
    private javax.swing.JButton publisherReloadButton;
    private javax.swing.JTable publisherTable;
    private javax.swing.JButton sectionReloadButton;
    private javax.swing.JTable sectionTable;
    // End of variables declaration//GEN-END:variables
}
